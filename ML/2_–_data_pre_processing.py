# -*- coding: utf-8 -*-
"""2 â€“ Data Pre-Processing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HeJeJcFollwma_hDCOHgNG5hhmWnt6dX

# Data Pre-Processing

### 1 - Data Cleaning
"""

import pandas as pd
df = pd.read_csv("https://raw.githubusercontent.com/ArchanaInsights/Datasets/main/diabetes.csv")
df.info()

"""#### 1.1 - Column Renaming"""

# 1.1 - Rename Columns
df.rename(columns = {"No_Pation" : "Patients"}, inplace = True)
df.columns

"""#### 1.2 - Unique values in Categarical column"""

# 1.2 - Check Unique Values in Categorical Columns
# ["Gender"] - Column
df["Gender"].unique()

# handling incorrect values
df["Gender"] = df["Gender"].replace({"F" : "Female", "M" : "Male", "f" : "Female"})
df["Gender"] = df["Gender"].fillna("Unknown")
df["Gender"].unique()

# ["CLASS"] - Column
df["CLASS"].unique()

#N (No diabetes), P (Pre-diabetes), Y (Yes, Diabetes)
df["CLASS"] = df["CLASS"].replace({"N" : "No diabetes", "N " : "No diabetes", "P" : "Pre-diabetes", "Y" : "Yes, Diabetes", "Y " : "Yes, Diabetes"})
df["CLASS"].unique()

"""#### 1.3 - Statistical Summary of Numerical Columns"""

# Statistical Summary of Numerical Columns
print(f"Statistical Summery for Each column\n")
for i in df.select_dtypes(include = "number").columns:
  print(f"----------- '{i}' column ---------------")
  print(f"Mean : {df[i].mean():.4f}")
  print(f"Median : {df[i].median():.4f}")
  print(f"Min : {df[i].min()}")
  print(f"Max : {df[i].max()}")
  print(f"Standard Deviation : {df[i].std():.4f}")
  print("\n")

"""#### 1.4 - Box Plot of Numerical Columns"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(15, 15))

for i, col in enumerate(df.select_dtypes(include="number").columns, start=1):
    plt.subplot(4, 3, i)
    sns.boxplot(data=df[col], color="skyblue")
    plt.title(f"Box Plot for {col}")
    plt.xlabel(col)
    plt.ylabel("Values")
    plt.grid(axis="y", linestyle="--", alpha=0.6)
plt.tight_layout()
plt.show()

"""#### 1.5 - Identify Missing Values"""

# Identify Missing Values
df.isnull().sum()

"""#### 1.6 - Impute Missing Values"""

# Impute Missing Values by Median()
df["AGE"] = df["AGE"].fillna(df["AGE"].median())
df["AGE"].isnull().sum()

# Impute Missing Values
df["HbA1c"] = df["HbA1c"].fillna(df["HbA1c"].mean())
df["HbA1c"].isnull().sum()

# Impute Missing Values by Mean()
df["Urea"] = df["Urea"].fillna(df["Urea"].mean())
df["Urea"].isnull().sum()

# Impute Missing Values by Mode()
df["Cr"] = df["Cr"].fillna(df["Cr"].mode()[0])
df["Cr"].isnull().sum()

# Remaining columns Imputed By Median()
for i in df.columns[7: 12]:
  df[i] = df[i].fillna(df[i].median())
  print(f"{i} - \t", df[i].isnull().sum())

df.isnull().sum()

"""#### 1.7 - Outlier Handling"""

# a. Reatain Outliers
given_cols = ["AGE", "HbA1c", "BMI"]
plt.figure(figsize = (12, 5))
for i, col in enumerate(given_cols, start = 1):
  plt.subplot(1, 3, i)
  sns.boxplot(data = df[col], color = "Orange")
  plt.title(f"Outliers for - {col}")
  plt.xlabel(col)
  plt.ylabel("Values")
  plt.grid(axis = "y")

plt.tight_layout()
plt.show()

# b. Filter Outliers by using percentile threshhold
cr_th = df["Cr"].quantile(0.995)
urea_th = df["Urea"].quantile(0.999)
filtered_df = df[(df["Cr"] <= cr_th) & (df["Urea"] <= urea_th)]
print(f"Original Data Shape : {df.shape}")
print(f"Filtered Data Shape : {filtered_df.shape}")

# c. Remove Extreme Outliers for ()
out_rem_col = ["LDL", "VLDL", "HDL", "TG", "Chol"]
for i in out_rem_col:
  Q1 = df[i].quantile(0.25)
  Q3 = df[i].quantile(0.75)
  IQR = Q3 - Q1

  Lower_Bound = Q1 - 1.5 * IQR
  Upper_Bound = Q3 + 1.5 * IQR

  df = df[(df[i] >= Lower_Bound) & (df[i] <= Upper_Bound)]
print(df.shape)

"""#### 1.8 Check for Duplicates"""

# Check for Duplicates:
df.duplicated().sum()

df[df.duplicated(keep = False)]

df.drop_duplicates(inplace = True)
df.duplicated().sum()

"""### 2 - Data Transformation

#### 2.1 - Feature Engineering
"""

# Feature Engineering
df.select_dtypes(include = "O").columns
df["Gender"].unique()

# Convert Categarical column to Numerical Column
from sklearn.preprocessing import LabelEncoder
encoders_list = df.select_dtypes(include = "O").columns.to_list()
for i in encoders_list:
  obj = LabelEncoder()
  df[i] = obj.fit_transform(df[i])
df.head()

"""#### 2.2 - Feature Scaling"""

# Standerdization Scaler
from sklearn.preprocessing import StandardScaler
numerical_cols = df.select_dtypes(include = "number").columns.to_list()
scaler = StandardScaler()
df[numerical_cols] = scaler.fit_transform(df[numerical_cols])
df.describe()

from sklearn.preprocessing import MinMaxScaler
numerical_cols = df.select_dtypes(include = "number").columns.to_list()
scaler = MinMaxScaler()
df[numerical_cols] = scaler.fit_transform(df[numerical_cols])
df.describe()
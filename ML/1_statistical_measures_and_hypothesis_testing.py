# -*- coding: utf-8 -*-
"""1 - Statistical Measures and Hypothesis Testing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d8_6Ipq3Y3LuPB12BvJJ6RVgLXbrjApd

#  Statistical Analysis

## 1 - Descriptive Statistics
"""

# Descriptive Statistics for the Score columns
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
path = "https://raw.githubusercontent.com/ArchanaInsights/Datasets/main/StudentsPerformance.csv"
df = pd.read_csv(path)
print(df.head())

"""## 2 - Identify and Handle Outliers"""

# 1 - box plots for math, read and write score

plt.figure(figsize = (15, 5))

# Math Score
plt.subplot(1, 3, 1)
plt.boxplot(df["math score"], vert = False, patch_artist= True)
plt.title("Box plot for math score")
plt.xlabel("Math score")
plt.xticks([])

# reading Score
plt.subplot(1, 3, 2)
plt.boxplot(df["reading score"], vert = False, patch_artist= True)
plt.title("Box plot for reading score")
plt.xlabel("reading score")
plt.xticks([])

# writing Score
plt.subplot(1, 3, 3)
plt.boxplot(df["writing score"], vert = False, patch_artist= True)
plt.title("Box plot for writing score")
plt.xlabel("writing score")
plt.xticks([])

plt.tight_layout(rect = [0, 0, 1, 1])
plt.show()

# Identify and Handle Outliers:
score_columns = ["math score", "reading score", "writing score"]
df_1 = df.copy()
IQR_values = []
upper_bounds = []
lower_bounds = []

for i in score_columns:
  # 2 - IQR values for each columns
  q1 = df[i].quantile(0.25)
  q3 = df[i].quantile(0.75)
  IQR = q3 - q1
  IQR_values.append(IQR)

  # 3 - Upper Boound and Lower Bound
  lower_bound = q1 - 1.5 * IQR
  upper_bound = q3 + 1.5 * IQR
  lower_bounds.append(lower_bound)
  upper_bounds.append(upper_bound)

  print(f"{i}:")
  print(f"- IQR value : {IQR}")
  print(f"- Lower Bound : {lower_bound}")
  print(f"- Upper Bound : {upper_bound}")

  # 4 - Removed Outliers
  df_1 =  df_1[(df_1[i] >= lower_bound) & (df_1[i] <= upper_bound)]
  print("\n")

print(df_1.describe())

"""## 3 - Check Distribution and Skewness:"""

# 3.1 - Plot histogram for visual representation
plt.figure(figsize = (12, 4))
score_columns = ["math score", "reading score", "writing score"]

for i, column in enumerate(score_columns, 1):
  plt.subplot(1, 3, i)
  sns.histplot(df[column], kde = True, bins = 10, color = "red")
  plt.title(column)
  plt.xlabel("Score")
  plt.ylabel("Range")

plt.tight_layout(rect = [0, 0, 1, 1])
plt.show()

# 3.2 - Skewness for each column
for i in score_columns:
  skewness = df_1[i].skew()
  if skewness > 1:
    print(f"{i} - {skewness:.2f} - Right Skewed")
  else:
    print(f"{i} - {skewness:.2f} - Left Skewed")

# 3.3 - Transformation based on skewness
for i in score_columns:
  df_1[i] = np.sqrt(df[i])
print(df.describe())

"""## 4 - Hypotheses Testing

### 4.1 - Formulate Hypotheses
"""

# Null Hypothesis (H₀) = There is no difference in 'math score' between students completed the 'Test Preperation Course' and those who did not.
# ---------- (H₀) : μ_course = 	μ_nocourse ------------------

# Alternative hypotheses (H₁) = there is no difference between them.
# ---------- (H₁) : μ_course != μ_nocourse ------------------

# we confirmed this is a "Two Tailed Test"

"""### 4.2 - Significance Level"""

alpha = 0.05
#5% chance to reject (H₀) when it is actually True.

"""### 4.3 - t-test Test Statistic & p-value"""

# Two group are Course Completed and Incompleted
completed = df[df["test preparation course"] == "completed"]["math score"]
incompleted = df[df["test preparation course"] == "none"]["math score"]

# Calculates the Statistics
from scipy import stats
t_statistics, p_value = stats.ttest_ind(completed, incompleted)

print(f"t-statistics: {t_statistics}")
print(f"p-value: {p_value}")

"""### 4.4 - Decision"""

# There is no significance different
# alpha value = 0.05
# P_value = 1.5359134607147415e-08
# now we conclude the result is 0.05 < 1.5359134607147415e-08
# failed to reject the Null Hypotheses
# the course does not affect the students.